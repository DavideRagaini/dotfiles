set shell dash
set shellopts '-eu'
set ifs "\n"
set scrolloff 5
set ratios 1:2:5
# set color256
set icons
set period 1
# set hidden
set relativenumber
set drawbox
set autoquit true
set preview false
# source ~/.config/lf/sixel.conf
source ~/.config/lf/ueberzug.conf
set cleaner ~/.config/lf/clear_img.sh
# source ~/.config/lf/shortcuts
set incsearch
set incfilter

# cmds/functions
cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
        application/bzip2) atool --list -- "$fx" ;;
        application/gzip) atool --list -- "$fx" | bat | bat ;;
        application/json) $EDITOR "$fx" ;;
        application/lzma) atool --list -- "$fx" | bat ;;
        application/lzop) atool --list -- "$fx" | bat ;;
        application/octet-stream) zathura --fork "$f" >/dev/null 2>&1 ;;
        application/pgp-encrypted) $EDITOR "$fx" ;;
        application/x-brotli) atool --list -- "$fx" | bat ;;
        application/x-iso9660-image) ;;
        application/x-lzip) atool --list -- "$fx" | bat ;;
        application/x-tar) atool --list -- "$fx" | bat ;;
        application/zip) atool --list -- "$fx" | bat ;;

        application/vnd.openxmlformats-officedocument.wordprocessingml.document) setsid -f lowriter $fx >/dev/null 2>&1 ;;
        application/vnd.oasis.opendocument.text) setsid -f lowriter $fx >/dev/null 2>&1 ;;
        application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) setsid -f localc $fx >/dev/null 2>&1 ;;
        application/octet-stream) setsid -f localc $fx >/dev/null 2>&1 ;;
        application/vnd.oasis.opendocument.spreadsheet) setsid -f localc $fx >/dev/null 2>&1 ;;
        application/vnd.oasis.opendocument.spreadsheet-template) setsid -f localc $fx >/dev/null 2>&1 ;;
        application/vnd.openxmlformats-officedocument.presentationml.presentation) setsid -f loimpress $fx >/dev/null 2>&1 ;;
        application/vnd.oasis.opendocument.presentation-template) setsid -f loimpress $fx >/dev/null 2>&1 ;;
        application/vnd.oasis.opendocument.presentation) setsid -f loimpress $fx >/dev/null 2>&1 ;;
        application/vnd.ms-powerpoint) setsid -f loimpress $fx >/dev/null 2>&1 ;;
        application/vnd.oasis.opendocument.graphics) setsid -f lodraw $fx >/dev/null 2>&1 ;;
        application/vnd.oasis.opendocument.graphics-template) setsid -f lodraw $fx >/dev/null 2>&1 ;;
        application/vnd.oasis.opendocument.formula) setsid -f lomath $fx >/dev/null 2>&1 ;;
        application/vnd.oasis.opendocument.database) setsid -f lobase $fx >/dev/null 2>&1 ;;

        audio/*) mpv "$fx" --no-config --no-audio-display --term-osd-bar ;;

        application/vnd.amazon.ebook) zathura --fork "$f" ;;
        application/epub+zip) zathura --fork "$f" ;;
        application/pdf) zathura --fork "$f" >/dev/null 2>&1 ;;
        # application/pdf) setsid -f sioyek --new-window "$fx" >/dev/null 2>&1 ;;
        application/postscrip) zathura --fork $fx >/dev/null 2>&1 ;;
        image/svg+xml) setsid -f display -- "$fx";;
        image/vnd.djvu) zathura --fork "$f" >/dev/null 2>&1 ;;

        image/x-xcf) setsid -f gimp "$fx" >/dev/null 2>&1 ;;
        image/*) setsid -f imv-dir "$fx"  >/dev/null 2>&1 ;;
        # image/*) rotdir "$fx" |
        #     grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" |
        #     nsxiv -aio 2>/dev/null |
        #     lf-select & ;;

        */xml) bat --paging=never --line-range :50 "$fx" ;;
        text/html) $BROWSER "$fx" ;;
        text/troff) man ./ "${file}" | col -b ;;
        text/*) $EDITOR "$fx" ;;

        video/*) setsid -f mpv "$fx" --no-terminal ;;
        *) xdg-open "$fx" ;;
    esac
}}

cmd alt_open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
        # application/pdf) zathura --fork "$fx" >/dev/null 2>&1 ;;
        application/pdf) setsid -f sioyek --new-window "$fx" >/dev/null 2>&1 ;;
        application/zip) zathura --fork "$fx" >/dev/null 2>&1;;
        video/*) setsid -f mpv --no-config -no-terminal "$fx" ;;
        *) xdg-open "$fx" ;;
    esac
}}

cmd extract ${{
    set -f
    printf "%s\n\t" "$fx"
    printf "extract?[y/N]"
    read ans
    [ $ans = "y" ] && aunpack $fx
}}

cmd mkdir %{{
    IFS=" "
    mkdir -p -- "$*"
    lf -remote "send $id select \"$*\""
}}

cmd trash ${{
    set -f
    printf "%s\n\t" "$fx"
    printf "Trash?[y/*]"
    read ans
    [ $ans = "y" ] && trash-put -- $fx
}}

cmd delete ${{
    set -f
    printf "%s\n\t" "$fx"
    printf "Delete?[y/*]"
    read ans
    [ $ans = "y" ] && rm -rf -- $fx
}}

cmd compare ${{
    set -f
    printf "%s\n\t" "$fx"
    printf "Compare?[y/*]"
    read ans
    [ $ans = "y" ] && rsync -rncv --delete -- $fx
}}

cmd moveto ${{
    set -f
    echo "Move to where?"
    dest=$(fd -td "^[0-9a-zA-Z]*" "$HOME" | fzf)
    for x in $fx; do
        eval mv -iv \"$x\" \"$dest\"
    done &&
    sync
    notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

cmd copyto ${{
    set -f
    echo "Copy to where?"
    dest=$(fd -td "^[0-9a-zA-Z]*" $HOME | fzf)
    for x in $fx; do
        eval cp -ivr \"$x\" \"$dest\"
    done &&
    sync
    notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

cmd fzf_jump ${{
    # res=$(fdfind -td -E octave -E Packages -E "*/lost+found" -E "*/Music/*" "^[0-9a-zA-Z]*" $HOME | fzf)
    res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ]; then
        cmd="cd"
    else
        cmd="select"
    fi
    lf -remote "send $id $cmd \"$res\""
}}

cmd fzf_search ${{
    res="$( \
        RG_PREFIX="rg --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}

cmd zle-cd %printf 'cd %q && zle reset-prompt\n' "$PWD" >&$ZLE_FIFO

cmd zle-insert-relative %{{
    for f in $fx; do
        printf 'LBUFFER+="${LBUFFER:+ }${(q)$(realpath %q --relative-to=$PWD)}"\n' "$f" >&$ZLE_FIFO
    done
}}

cmd zle-insert-absolute %{{
    for f in $fx; do
        printf 'LBUFFER+="${LBUFFER:+ }%q"\n' "$f" >&$ZLE_FIFO
    done
}}

cmd zle-init :{{
    map . zle-cd
    map x zle-insert-relative
    map X zle-insert-absolute
}}

&[[ -n "$ZLE_FIFO" ]] && lf -remote "send $id zle-init"

cmd dotofile &{{
    set -- $(cat ~/.local/share/lf/files)
    printf "%s\n\t" "$fx"
    printf "What to do?"
    read ans
    $ans "$@"
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd size &{{
    lf -remote "send $id echo $(du -hc $fx | tail -n1)"
}}

cmd async_paste &{{
    set -- $(cat ~/.local/share/lf/files)
    time_start="$(date '+%s')"
    mode="$1"
    shift
    case "$mode" in
        copy) cp -rn -- "$@" .;;
        move) mv -n -- "$@" .;;
    esac
    sync
    time_end="$(date '+%s')"
    time_diff="$(( time_end - time_start ))"
    if [ $time_diff -gt 10 ]; then
        h_time="$((time_diff / 3600)):$((time_diff / 60)):$((time_diff % 60))"
        notify-send "$h_time ($time_diff) ASYNC done" "$(cat ~/.local/share/lf/files)"
    else
        notify-send "ASYNC done" "$(cat ~/.local/share/lf/files)"
    fi
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd backup_paste %{{
    set -- $(cat ~/.local/share/lf/files)
    time_start="$(date '+%s')"
    mode="$1"
    shift
    case "$mode" in
        copy) cp -r --backup=numbered -- "$@" .;;
        move) mv --backup=numbered -- "$@" .;;
    esac
    sync
    time_end="$(date '+%s')"
    time_diff="$(( time_end - time_start ))"
    if [ $time_diff -gt 10 ]; then
        h_time="$((time_diff / 3600)):$((time_diff / 60)):$((time_diff % 60))"
        notify-send "$h_time ($time_diff) Backup done" "$(cat ~/.local/share/lf/files)"
    else
        notify-send "Backup done" "$(cat ~/.local/share/lf/files)"
    fi
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd paste &{{
    set -- $(cat ~/.local/share/lf/files)
    time_start="$(date '+%s')"
    mode="$1"
    shift
    case "$mode" in
        copy)
            # rsync -auvrhP --ignore-existing --info=progress2 -- "$@" . |
            rsync -rvP --progress -- "$@" . |
            stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            while IFS= read -r line; do
                lf -remote "send $id echo $line"
            done
            cmd='COPY'
            ;;
        move)
            mv -n -- "$@" .
            cmd='MOVE'
            ;;
    esac
    sync
    time_end="$(date '+%s')"
    time_diff="$(( time_end - time_start ))"
    if [ $time_diff -gt 10 ]; then
        h_time="$((time_diff / 3600)):$((time_diff / 60)):$((time_diff % 60))"
        notify-send "$h_time ($time_diff) $cmd done" "$(cat ~/.local/share/lf/files)"
    else
        notify-send "$cmd done" "$(cat ~/.local/share/lf/files)"
    fi
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd on-redraw %{{
    if [ $lf_width -le 120 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $lf_width -le 200 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:5"
    fi
}}

cmd toggle_preview %{{
    if [ "$lf_preview" = "true" ]; then
        lf -remote "send $id :set preview false; set ratios 1:2:3"
    else
        lf -remote "send $id :set preview true; set ratios 1:2"
    fi
}}
map zp toggle_preview

# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd zz %{{
    result="$(zoxide query --exclude $PWD $@ | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
}}

cmd zi ${{
    result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
}}

cmd follow_link %{{
  lf -remote "send ${id} select '$(readlink $f)'"
}}

cmd newfold ${{
    set -f
    read newd
    printf "Directory name: "
    mkdir -- "$newd"
    mv -- $fx "$newd"
    sync
}}

cmd cut-add %{{
    files=$(lf -remote load | tail -n +2)
    newline=$'\n'

    # change to $fx to add current file when no toggled
    # files exist.
    if [ -n "$files" ]; then
        new_files=$(echo "$files${newline}$fs" | sort | uniq)
    else
        new_files=$fs
    fi
    # remove empty lines from the file list, because they keep messing
    # up the selection.
    new_files=$(echo "$new_files" | sed --quiet -e '/^$/d' -e 'p')

    lf -remote "save${newline}move${newline}${new_files}${newline}"
    lf -remote "send $id unselect${newline}send $id sync"
}}

cmd cut-remove %{{
    files=$(lf -remote load)
    operation=$(echo "$files" | head -n1)

    if [ "$operation" != "move" ]; then
        lf -remote "send $id echoerr no files in cut list."
        exit 1
    fi

    files=$(echo "$files" | tail -n +2)
    newline=$'\n'

    # change to $fx to remove current file when no toggled
    # files exist.
    if [ -n "$files" ]; then
        # here we want all files in $files that aren't in $fs, making sure
        # that none of the entries in $fs are included, even when they aren't
        # in $files. To do this we concatenate $files and $fs (twice), printing
        # only the uniqe lines.
        new_files=$(echo "$files$newline$fs$newline$fs" | sort | uniq -u)
    else
        new_files=$files
    fi
    new_files=$(echo "$new_files" | sed --quiet -e '/^$/d' -e 'p')

    lf -remote "save${newline}move${newline}${new_files}${newline}"
    lf -remote "send $id unselect${newline}send $id sync"
}}

cmd fzf_search ${{
    res="$( \
        RG_PREFIX="rg --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}
map gr :fzf_search

cmd on-cd &{{
    # '&' commands run silently in background (which is what we want here),
    # but are not connected to stdout.
    # To make sure our escape sequence still reaches stdout we pipe it to /dev/tty
    # display git repository status in your prompt
    source /usr/share/git/completion/git-prompt.sh
    GIT_PS1_SHOWDIRTYSTATE=auto
    GIT_PS1_SHOWSTASHSTATE=auto
    GIT_PS1_SHOWUNTRACKEDFILES=auto
    GIT_PS1_SHOWUPSTREAM=auto
    GIT_PS1_COMPRESSSPARSESTATE=auto
    git=$(__git_ps1 " [GIT BRANCH:> %s]") || true
    fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m$git\033[0m"
    lf -remote "send $id set promptfmt \"$fmt\""
    # printf "\033]0; $PWD\007" > /dev/tty
}}
on-cd

cmd compressvideo ${{
    clear
    set -f
    converted_filenames=""  #notify-send variable
    converted_files_count=0 #notify-send variable
    echo "Compression Rate? (default: 31, maximum: 50)"
    read compressionRate
    #If not a number (e.g. empty), give default 31 value
    if ! [ $compressionRate =~ ^[0-5][0-9]$ ]; then
        compressionRate="31"
    fi
    for pickedFilepath in $fx; do
        #could instead use ffprobe but would get more complicated as the filetype suffix becomes unknown
        case $pickedFilepath in
            *.mp4)
                tempFilepath=$(echo "$pickedFilepath" | sed 's|.mp4|(CONVERTING).mp4|')
                mv -f "$pickedFilepath" "$tempFilepath"
                sync
                ffmpeg -i "$tempFilepath" -vcodec libx265 -crf "$compressionRate" "$pickedFilepath"
                rm -f -- "$tempFilepath"
                ;;
            *.webm | *.mkv)
                newFilepath=$(echo "$pickedFilepath" | sed 's/\(.webm\|.mkv\)/.mp4/')
                ffmpeg -i "$pickedFilepath" -vcodec libx265 -crf "$compressionRate" "$newFilepath"
                rm -f -- "$pickedFilepath"
                ;;
            *)
                continue 1
                ;;
        esac
        converted_files_count=0
        ((converted_files_count = converted_files_count + 1))
        converted_filenames="$converted_filenames"$'\n'"$pickedFilepath"
    done
    #Notify the user of the results
    if [[ $converted_files_count -gt 0 ]]; then
        converted_filenames=$(echo "$converted_filenames" | sed 's|.*\/||')
        notify-send "Compressed Videos($converted_files_count):" "$converted_filenames"
    fi
}}
map bv compressvideo "$fx"

cmd on-select &{{
    lf -remote "send $id set statfmt \"$(exa -ldg --color=always "$f")\""
}}

cmd follow_link %{{
  lf -remote "send ${id} select '$(readlink $f)'"
}}
map gL follow_link

cmd git_branch ${{
    git branch | fzf | xargs git checkout
    pwd_shell=$(pwd)
    lf -remote "send $id updir"
    lf -remote "send $id cd \"$pwd_shell\""
}}
map gb :git_branch
map gp ${{clear; git pull --rebase || true; echo "press ENTER"; read ENTER}}
map gs ${{clear; git status; echo "press ENTER"; read ENTER}}
map gl ${{clear; git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit}}

cmd async-shell &$@ $fx
cmd yank-dirname $dirname -- "$f" | head -c-1 | cclip
cmd yank-path $printf '%s' "$fx" | cclip
cmd yank-basename $basename -a -- $fx | head -c-1 | cclip
cmd yank-basename-without-extension &basename -a -- $fx | rev | cut -d. -f2- | rev | head -c-1 | cclip
cmd yank-org-link $printf '[[%s][%s]]' "$fx" "$(basename -a -- $fx)" | cclip

cmd open-with %"$@" $fx
cmd open-fork &setsid -f "$@" $fx

# cmd paste $cp-p --lf-paste $id

# Bindings
map . :read; cmd-history-prev; cmd-enter
map +d push :mkdir<space>
map +f push :touch<space>
map <enter> shell

map <a-b> $ln -sfr $f ~/.local/share/firefox
map <a-c> copyto
map <a-da> cut-add
map <a-dr> cut-remove
map <a-enter> push :async-shell<space>
map <a-n> newfold
map <a-m> moveto

map <c-b> $setbg $f
map <c-e> down
map <c-j> fzf_jump
map <c-n> push :mkdir<space>
map <c-o> &opener "$f"
# map <c-r> on-redraw; reload
map <c-t> !bat "$f"
map <c-y> up
map <c-z> $ kill -STOP $PPID
map <c-f-11> delete

map A :rename; cmd-end
map B !emacsclient -nw .
map C :rename; cmd-end; cmd-delete-home
map D trash
map E extract
map I :rename; cmd-home
map J :updir; set dironly true; down; set dironly false; open
map K :updir; set dironly true; up; set dironly false; open
map L alt_open
map N push :$chmod<space>644<space>$fx
map O push :open-fork<space>
map Pa async_paste
map Pb backup_paste
map Pp :link
map R on-redraw
map S size
map T !mediainfo "$f" | bat
map U clear
map W & $TERMINAL
map X !$f
map Yb yank-basename
map Ybe yank-basename-without-extension
map Yd yank-dirname
map Yo yank-org-link
map Yp yank-path
# map I push A<c-a> # at the very beginning
# map O $mimeopen --ask "$f"
# map V push :!nvim<space>

map c :rename; cmd-delete-home
map e !emacsclient -nw "$fx"
map gL follow_link
map gf :fzf_search
map gg top
map i rename
map o push :open-with<space>
